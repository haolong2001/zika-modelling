summary(res_weekly)
config <- make_config(list(si_distr = SI_vector))
method <- "non_parametric_si"
dates = length(incidences_5_year)
res_weekly <- estimate_R_agg(incid = incidences_5_year,
dt = 7L, # aggregation window of the data
dt_out = 7L, # desired sliding window length
iter = 10L,
config = config,
method = method,
grid = list(precision = 0.01, min = -1, max = 1))
plot(res_weekly)
Rt = res_weekly$R$`Mean(R)`
Rt
?Rt
?Rt
Rt
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
days = 1: length(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 1), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
fit <- nls(Rt ~ a + b1 * sin(2 * pi * days / 365) + b2 * cos(2 * pi * days / 365 + phi),
start = list(a = 0.5, b1 = 0.2, b2 = 0.2, phi = 0))
# Plot the original data and the fitted harmonic curve
plot(days, Rt, type = "l", ylim = c(0, 1), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Plot the original data and the fitted harmonic curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Find the phase shift parameter (phi) from the fitted model
phi <- coef(fit)["phi"]
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi) + 365 / 4  # Adding 365/4 shifts the peak to the center of the year
peak_date
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = peak_date, col = "blue", lty = 2)
101 -365 / 4
101 +365 / 4
192/30
# Iterate over columns "2019" to "2023" and extract non-missing values
for (col_name in c(paste(2015:2023))) {
# Extract non-missing values from the column
column_values <- dengue_data[[col_name]][!is.na(dengue_data[[col_name]])]
# Append the non-missing values to the incidences_5_year vector
incidences_5_year <- c(incidences_5_year, column_values)
}
# View the incidences_5_year vector
print(incidences_5_year)
# SI 15 - 17 DAYS
vector_length <- 18
SI_vector <- rep(0, vector_length)
days_to_change <- c(16, 17, 19)
SI_vector[days_to_change] <- 1/3
print(SI_vector)
summary(res_weekly)
config <- make_config(list(si_distr = SI_vector))
method <- "non_parametric_si"
dates = length(incidences_5_year)
res_weekly <- estimate_R_agg(incid = incidences_5_year,
dt = 7L, # aggregation window of the data
dt_out = 7L, # desired sliding window length
iter = 10L,
config = config,
method = method,
grid = list(precision = 0.01, min = -1, max = 1))
plot(res_weekly)
Rt = res_weekly$R$`Mean(R)`
days = 1: length(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Find the phase shift parameter (phi) from the fitted model
phi <- coef(fit)["phi"]
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi) + 365 / 4  # Adding 365/4 shifts the peak to the center of the year
peak_date
101 -365 / 4
101 +365 / 4
192/30
dengue_data <- read_excel(file_path)
names(dengue_data)
incidences_5_year <- c()
# Iterate over columns "2019" to "2023" and extract non-missing values
for (col_name in c(paste(2015:2023))) {
# Extract non-missing values from the column
column_values <- dengue_data[[col_name]][!is.na(dengue_data[[col_name]])]
# Append the non-missing values to the incidences_5_year vector
incidences_5_year <- c(incidences_5_year, column_values)
}
# View the incidences_5_year vector
print(incidences_5_year)
# SI 15 - 17 DAYS
vector_length <- 18
SI_vector <- rep(0, vector_length)
days_to_change <- c(16, 17, 19)
SI_vector[days_to_change] <- 1/3
print(SI_vector)
summary(res_weekly)
config <- make_config(list(si_distr = SI_vector))
method <- "non_parametric_si"
dates = length(incidences_5_year)
res_weekly <- estimate_R_agg(incid = incidences_5_year,
dt = 7L, # aggregation window of the data
dt_out = 30L, # desired sliding window length
iter = 10L,
config = config,
method = method,
grid = list(precision = 0.01, min = -1, max = 1))
plot(res_weekly)
Rt = res_weekly$R$`Mean(R)`
days = 1: length(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
# Find the phase shift parameter (phi) from the fitted model
phi <- coef(fit)["phi"]
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi) + 365 / 4  # Adding 365/4 shifts the peak to the center of the year
peak_date
abline(v = 30*6, col = "blue", lty = 2)
abline(v = 365, col = "blue", lty = 2)
abline(v = 30*6 +465, col = "blue", lty = 2)
abline(v = 365* 10 + 365, col = "blue", lty = 2)
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 365* 10 + 365, col = "blue", lty = 2)
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 365* 10 + 365, col = "blue", lty = 2)
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 365* 10 + 365, col = "blue", lty = 2)
abline(v = 30* 10 + 365, col = "blue", lty = 2)
plot(res_weekly)
Rt = res_weekly$R$`Mean(R)`[365* 5,365*7]
Rt <- res_weekly$R$'Mean(R)'[(365*5):(365*7)]
days = 1: length(Rt)
plot(Rt)
days = 1: length(Rt)
plot(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 30* 10 + 365, col = "blue", lty = 2)
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi) # Adding 365/4 shifts the peak to the center of the year
peak_date
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
days <- 1:1000
# Generate Rt values
Rt <- predict(fit)
Rt
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 , col = "blue", lty = 2)
abline(v = 30*4 , col = "blue", lty = 2)
abline(v = 30*8 , col = "blue", lty = 2)
abline(v = 30*6 + 365 , col = "blue", lty = 2)
Rt <- res_weekly$R$'Mean(R)'
days = 1: length(Rt)
plot(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 30* 10 + 365, col = "blue", lty = 2)
# Find the phase shift parameter (phi) from the fitted model
phi <- coef(fit)["phi"]
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
days <- 1:1000
# Generate Rt values
Rt <- predict(fit)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
# Generate Rt values
Rt <- predict(fit)
Rt <- res_weekly$R$'Mean(R)'
days = 1: length(Rt)
plot(Rt)
# Fit a sine function to the data
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 0.5, b = 0.2, phi = 0))
# Plot the original data and the fitted sine curve
plot(days, Rt, type = "l", ylim = c(0, 2), xlab = "Days", ylab = "Rt")
curve(predict(fit, newdata = data.frame(days = x)), add = TRUE, col = "red")
abline(v = 30*6 +365, col = "blue", lty = 2)
abline(v = 30* 10 + 365, col = "blue", lty = 2)
# Find the phase shift parameter (phi) from the fitted model
phi <- coef(fit)["phi"]
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
days <- 1:365 * 10
# Generate Rt values
Rt <- predict(fit)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
days <- 1:365 * 10
# Generate Rt values
Rt <- predict(fit)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence
length(incidence)
days <- 1:3650
# Generate Rt values
Rt <- predict(fit)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence
length(incidence)
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
length(Rt)
days <- 1:3240
# Generate Rt values
Rt <- predict(fit)
length(Rt)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence
length(incidence)
incidence[1] <- 10  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
incidence
# Plot incidence
plot(days, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
# Plot incidence
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*4 , col = "blue", lty = 2)
abline(v = 30*8 , col = "blue", lty = 2)
abline(v = 30*5 , col = "blue", lty = 2)
abline(v = 30*10 , col = "blue", lty = 2)
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*5 , col = "blue", lty = 2)
abline(v = 30*10 , col = "blue", lty = 2)
abline(v = 30*9 , col = "blue", lty = 2)
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*5 , col = "blue", lty = 2)
abline(v = 30*9 , col = "blue", lty = 2)
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
abline(v = 176 , col = "blue", lty = 2)
abline(v = 180 , col = "blue", lty = 2)
abline(v = 200 , col = "blue", lty = 2)
Rt[200]
Rt[198]
# Plot incidence
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*5 , col = "blue", lty = 2)
abline(v = 200 , col = "blue", lty = 2)
# Generate data using the provided NLS fit with y-center restriction
days <- 1:1000
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 1.0, b = 0.2, phi = 0))
# Generate data using the provided NLS fit with y-center restriction
days <- 1:length(Rt)
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 1.0, b = 0.2, phi = 0))
# Generate Rt values
Rt <- predict(fit)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
days <- 1:3240
# Generate Rt values
Rt <- predict(fit)
length(Rt)
plot(Rt)
# Initialize incidence vector
incidence <- numeric(length(days))
incidence
length(incidence)
incidence[1] <- 10  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*5 , col = "blue", lty = 2)
Rt[198]
abline(v = 200 , col = "blue", lty = 2)
Rt[195]
Rt[190]
abline(v = 30*5 , col = "blue", lty = 2)
abline(v = 200 , col = "blue", lty = 2)
abline(v = 30*9 , col = "blue", lty = 2)
# Plot incidence
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*10 , col = "blue", lty = 2)
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*10 , col = "blue", lty = 2)
abline(v = 30*6 + 365 , col = "blue", lty = 2)
abline(v = 30*10 , col = "blue", lty = 2)
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6  , col = "blue", lty = 2)
abline(v = 30*10   , col = "blue", lty = 2)
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 30*6  , col = "blue", lty = 2)
abline(v = 30*10   , col = "blue", lty = 2)
# Plot incidence
plot(1:365, incidence[1:365], type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
abline(v = 110 , col = "blue", lty = 2)
abline(v = 290 , col = "blue", lty = 2)
plot(res_weekly)
Rt <- res_weekly$R$`Mean(R)`
days <- 1:length(Rt)
fit <- nls(Rt ~ 1. + b * sin(2 * pi * days / 365 + phi),
start = list(a = 1.0, b = 0.2, phi = 0))
fit <- nls(Rt ~ a + b * sin(2 * pi * days / 365 + phi),
start = list(a = 1.0, b = 0.2, phi = 0))
fit <- nls(Rt ~ 1. + b * sin(2 * pi * days / 365 + phi),
start = list( b = 0.2, phi = 0))
# Initialize incidence vector
incidence <- numeric(length(days))
incidence[1] <- 1  # Initial incidence
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
# Generate Rt values
Rt <- predict(fit)
# Generate Rt values
Rt <- predict(fit)
# Generate incidence data using the iterative formula I[t+1] = I[t] * Rt
for (t in 1:(length(days) - 1)) {
incidence[t + 1] <- incidence[t] * Rt[t]
}
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
abline(v = 110 , col = "blue", lty = 2)
abline(v = 290 , col = "blue", lty = 2)
290/30
abline(v = 176 , col = "blue", lty = 2)
365/4
176/30
266 /30
86 /30
summary(fit)
incidences_5_year <- c()
# Iterate over columns "2019" to "2023" and extract non-missing values
for (col_name in c(paste(2015:2023))) {
# Extract non-missing values from the column
column_values <- dengue_data[[col_name]][!is.na(dengue_data[[col_name]])]
# Append the non-missing values to the incidences_5_year vector
incidences_5_year <- c(incidences_5_year, column_values)
}
# View the incidences_5_year vector
print(incidences_5_year)
?estimate_R_agg
res_weekly <- estimate_R_agg(incid = incidences_5_year,
dt = 7L, # aggregation window of the data
dt_out = 7L, # desired sliding window length
iter = 10L,
config = config,
method = method,
grid = list(precision = 0.01, min = -1, max = 1))
plot(res_weekly)
j# Generate data using the provided NLS fit with y-center restriction
Rt <- res_weekly$R$`Mean(R)`
# Generate data using the provided NLS fit with y-center restriction
Rt <- res_weekly$R$`Mean(R)`
days <- 1:length(Rt)
fit <- nls(Rt ~ 1. + b * sin(2 * pi * days / 365 + phi),
start = list( b = 0.2, phi = 0))
summary(fit)
# Plot incidence
plot(days, incidence, type = "l", xlab = "Days", ylab = "Incidence",
main = "Incidence over Time")
summary(fit)
?estimate_R_agg
res_weekly <- estimate_R_agg(incid = incidences_5_year,
dt = 7L, # aggregation window of the data
dt_out = 20L, # desired sliding window length
iter = 10L,
config = config,
method = method,
grid = list(precision = 0.01, min = -1, max = 1))
plot(res_weekly)
# Generate data using the provided NLS fit with y-center restriction
Rt <- res_weekly$R$`Mean(R)`
days <- 1:length(Rt)
fit <- nls(Rt ~ 1. + b * sin(2 * pi * days / 365 + phi),
start = list( b = 0.2, phi = 0))
summary(fit)
phi = 0.027881
# Find the date corresponding to the peak by solving for the maximum value of the sine function
peak_date <- -phi * 365 / (2 * pi)  + 365/2
peak_date
mean(Rt)
std(Rt)
sd(Rt)
